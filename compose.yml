name: kuerzen
services:
  db:
    image: postgres:17-alpine
    env_file: [.app.env]
    ports:
      - ${DB_HOST_PORT}:5432
    volumes: [./local/postgres/data:/var/lib/postgresql/data]
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""
      ]
      start_period: 30s
    networks:
      - application
  analytics-db:
    image: influxdb:2-alpine
    env_file: [.app.env]
    ports:
      - ${ANALYTICS_DB_HOST_PORT}:8086
    volumes:
      - ./local/influxdb/data:/var/lib/influxdb2
      - ./local/influxdb/config:/etc/influxdb2
    healthcheck:
      test: ["CMD-SHELL", "influx ping"]
      start_period: 30s
    networks:
      - application
  cache:
    image: redis:7.2.9-alpine
    env_file: [.app.env]
    ports:
      - ${CACHE_HOST_PORT}:6379
    volumes:
    - ./local/redis/data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli PING"]
      start_period: 30s
    networks:
      - application
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    env_file: [.app.env]
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./local/openresty/logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://api-gateway/health || exit 1"]
      start_period: 30s
    networks:
      - application
    depends_on:
      shortener:
        condition: service_healthy
      redirector:
        condition: service_healthy
  shortener:
    build:
      context: ./
      dockerfile: ./shortener/Dockerfile.dev
    working_dir: /app/shortener
    env_file: [.app.env]
    ports:
      - ${SHORTENER_HOST_PORT}:${SHORTENER_PORT}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      analytics:
        condition: service_healthy
    networks:
      - application
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://shortener:${SHORTENER_PORT}/health || exit 1"]
      start_period: 30s
  redirector:
    build:
      context: ./
      dockerfile: ./redirector/Dockerfile.dev
    working_dir: /app/redirector
    env_file: [.app.env]
    ports:
      - ${REDIRECTOR_HOST_PORT}:${REDIRECTOR_PORT}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      analytics:
        condition: service_healthy
    networks:
      - application
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://redirector:${REDIRECTOR_PORT}/health || exit 1"]
      start_period: 30s
  analytics:
    build:
      context: ./
      dockerfile: ./analytics/Dockerfile.dev
    working_dir: /app/analytics
    env_file: [.app.env]
    ports:
      - ${ANALYTICS_HOST_PORT}:${ANALYTICS_PORT}
    volumes:
      - .:/app
    depends_on:
      analytics-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://analytics:${ANALYTICS_PORT}/health || exit 1"]
      start_period: 30s
    networks:
      - application

networks:
  application:
    name: ${APP_NETWORK}
    driver: bridge
